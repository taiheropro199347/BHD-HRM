// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using BHDHRMWebAPI.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace BHDHRMWebAPI.Models
{
    public partial class BHDHRMContext
    {
        private IBHDHRMContextProcedures _procedures;

        public virtual IBHDHRMContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new BHDHRMContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IBHDHRMContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<prNgayCongResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_HR_BC_HopDongHetHanResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_HR_BC_LuongResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_HR_BC_SinhNhatResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_HR_BC_TroCapResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_HR_LuongPTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_Menu1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_Menu2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<pro_Menu3Result>().HasNoKey().ToView(null);
        }
    }

    public partial class BHDHRMContextProcedures : IBHDHRMContextProcedures
    {
        private readonly BHDHRMContext _context;

        public BHDHRMContextProcedures(BHDHRMContext context)
        {
            _context = context;
        }

        public virtual async Task<List<prNgayCongResult>> prNgayCongAsync(int? Thang, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Thang",
                    Value = Thang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<prNgayCongResult>("EXEC @returnValue = [dbo].[prNgayCong] @Thang", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_HR_BC_HopDongHetHanResult>> pro_HR_BC_HopDongHetHanAsync(string Rap, string Phong, string Ngay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rap",
                    Size = 100,
                    Value = Rap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phong",
                    Size = 100,
                    Value = Phong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ngay",
                    Size = 100,
                    Value = Ngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_HR_BC_HopDongHetHanResult>("EXEC @returnValue = [dbo].[pro_HR_BC_HopDongHetHan] @Rap, @Phong, @Ngay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_HR_BC_LuongResult>> pro_HR_BC_LuongAsync(string Rap, string Phong, string MaNV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rap",
                    Size = 100,
                    Value = Rap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phong",
                    Size = 100,
                    Value = Phong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaNV",
                    Size = 100,
                    Value = MaNV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_HR_BC_LuongResult>("EXEC @returnValue = [dbo].[pro_HR_BC_Luong] @Rap, @Phong, @MaNV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_HR_BC_SinhNhatResult>> pro_HR_BC_SinhNhatAsync(string Rap, string Phong, string MaNV, string Thang, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rap",
                    Size = 100,
                    Value = Rap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phong",
                    Size = 100,
                    Value = Phong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaNV",
                    Size = 100,
                    Value = MaNV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Thang",
                    Size = 20,
                    Value = Thang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_HR_BC_SinhNhatResult>("EXEC @returnValue = [dbo].[pro_HR_BC_SinhNhat] @Rap, @Phong, @MaNV, @Thang", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_HR_BC_TroCapResult>> pro_HR_BC_TroCapAsync(string Rap, string Phong, string MaNV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rap",
                    Size = 100,
                    Value = Rap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Phong",
                    Size = 100,
                    Value = Phong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MaNV",
                    Size = 100,
                    Value = MaNV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_HR_BC_TroCapResult>("EXEC @returnValue = [dbo].[pro_HR_BC_TroCap] @Rap, @Phong, @MaNV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_HR_LuongPTResult>> pro_HR_LuongPTAsync(string Rap, DateTime? ngay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Rap",
                    Size = 100,
                    Value = Rap ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ngay",
                    Value = ngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_HR_LuongPTResult>("EXEC @returnValue = [dbo].[pro_HR_LuongPT] @Rap, @ngay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_Menu1Result>> pro_Menu1Async(string group, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Size = 100,
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_Menu1Result>("EXEC @returnValue = [dbo].[pro_Menu1] @group", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_Menu2Result>> pro_Menu2Async(string group, string Menu, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Size = 100,
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Menu",
                    Size = 100,
                    Value = Menu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_Menu2Result>("EXEC @returnValue = [dbo].[pro_Menu2] @group, @Menu", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<pro_Menu3Result>> pro_Menu3Async(string group, string Menu, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "group",
                    Size = 100,
                    Value = group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Menu",
                    Size = 100,
                    Value = Menu ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<pro_Menu3Result>("EXEC @returnValue = [dbo].[pro_Menu3] @group, @Menu", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
